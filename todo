GLTF

primitive_transform {
    // describe a primitives local transformation
    scale,
    rotation,
    translate,
}

primitive_meta {
    buffers: Vec<Buffer> // sorted by shader location
}

primitive_instances: Map<primitive_meta, Vec<primitive_transform>>

primitive_instances_bind_group: Map<primitive_meta, BindGroup<primitive_transform>

pipelines: Map<render_pipeline, Vec<primitive_meta>> // map pipeline to all primitives it should render

global_transforms: Map<primitive_meta, global_transform>

Loop all nodes in scene:
    Loop all meshes in node:
        determine global_transform for this mesh
        Loop all primitives in mesh:
            new primitive_meta
            construct buffers sorted by shader location
            fetch or construct pipeline for primitive_meta based on attributes available
            add primitive meta to pipelines map at pipeline key, inserting if necessary
            determine primitive_transform from local transform data
            add primitive_transform to primitive_instances key at primitive_meta
            add global_transform bind group to global_transforms at primitive_meta

construct primitive_instances_bind_groups map from primitive_instances map

At this point all data is initialized for rendering.

set frame globals (camera, lights)
Loop all (render_pipeline, Vec<primitive_meta>) in pipelines:
    set_pipeline(render_pipeline)
    Loop all primitive_meta
        set global bind group from global_transforms map
        set instances bind group from primitive_meta_instance_bind_groups
        set vertex buffers
        draw primitive_meta



            








